#include <iostream>
#include <winsock2.h>
#include <ws2tcpip.h>
#include <thread>
#include <string>
#include <vector>

#pragma comment(lib, "Ws2_32.lib")

#define PROXY_PORT "5080"
#define SERVER_PORT "9080"
#define SERVER_IP "127.0.0.1"
#define BUFFER_SIZE 8192

char hazardous_contents_CS_01[256] = "admin_login.html";
char hazardous_contents_CS_02[256] = "password.txt";
char hazardous_contents_SC_01[256] = "";
char hazardous_contents_SC_02[256] = "";

bool containsHazardousContent(const std::string& message, const char* hazardous_content) {
    return message.find(hazardous_content) != std::string::npos;
}

void handleClient(SOCKET clientSocket) {
    char buffer[BUFFER_SIZE];
    int recvBytes;

    // Receive the request from the client
    recvBytes = recv(clientSocket, buffer, BUFFER_SIZE, 0);
    if (recvBytes <= 0) {
        closesocket(clientSocket);
        return;
    }

    std::string request(buffer, recvBytes);

    // Check for hazardous content in the client's request
    if ((request.find("GET") != std::string::npos) &&
        (containsHazardousContent(request, hazardous_contents_CS_01) ||
            containsHazardousContent(request, hazardous_contents_CS_02))) {
        std::string unauthorizedResponse = "HTTP/1.1 401 Unauthorized\r\nContent-Type: text/html\r\n\r\n<html><body><h1>401 Unauthorized Access</h1></body></html>\r\n";
        send(clientSocket, unauthorizedResponse.c_str(), unauthorizedResponse.length(), 0);
        closesocket(clientSocket);
        return;
    }


    // Forward the request to the real web server
    addrinfo hints = {};
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;

    addrinfo* serverInfo;
    getaddrinfo(SERVER_IP, SERVER_PORT, &hints, &serverInfo);

    SOCKET serverSocket = socket(serverInfo->ai_family, serverInfo->ai_socktype, serverInfo->ai_protocol);
    connect(serverSocket, serverInfo->ai_addr, (int)serverInfo->ai_addrlen);

    send(serverSocket, request.c_str(), request.length(), 0);

    // Receive the response from the server
    recvBytes = recv(serverSocket, buffer, BUFFER_SIZE, 0);
    if (recvBytes <= 0) {
        closesocket(clientSocket);
        closesocket(serverSocket);
        return;
    }

    std::string response(buffer, recvBytes);

    // Check for hazardous content in the server's response
    if (containsHazardousContent(response, hazardous_contents_SC_01) || containsHazardousContent(response, hazardous_contents_SC_02)) {
        closesocket(clientSocket);
        closesocket(serverSocket);
        return;
    }

    // Forward the response to the client
    send(clientSocket, response.c_str(), response.length(), 0);

    // Close the connections
    closesocket(clientSocket);
    closesocket(serverSocket);
}

int main() {
    WSADATA wsaData;
    int iResult;

    // Initialize Winsock
    iResult = WSAStartup(MAKEWORD(2, 2), &wsaData);
    if (iResult != 0) {
        std::cerr << "WSAStartup failed: " << iResult << std::endl;
        return 1;
    }

    // Set up the listening socket for the proxy
    addrinfo hints = {};
    hints.ai_family = AF_INET;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    hints.ai_flags = AI_PASSIVE;

    addrinfo* result;
    iResult = getaddrinfo(NULL, PROXY_PORT, &hints, &result);
    if (iResult != 0) {
        WSACleanup();
        std::cerr << "getaddrinfo failed: " << iResult << std::endl;
        return 1;
    }

    SOCKET listenSocket = socket(result->ai_family, result->ai_socktype, result->ai_protocol);
    if (listenSocket == INVALID_SOCKET) {
        freeaddrinfo(result);
        WSACleanup();
        std::cerr << "Error at socket(): " << WSAGetLastError() << std::endl;
        return 1;
    }

    iResult = bind(listenSocket, result->ai_addr, (int)result->ai_addrlen);
    if (iResult == SOCKET_ERROR) {
        freeaddrinfo(result);
        closesocket(listenSocket);
        WSACleanup();
        std::cerr << "Bind failed with error: " << WSAGetLastError() << std::endl;
        return 1;
    }

    freeaddrinfo(result);

    iResult = listen(listenSocket, SOMAXCONN);
    if (iResult == SOCKET_ERROR) {
        closesocket(listenSocket);
        WSACleanup();
        std::cerr << "Listen failed with error: " << WSAGetLastError() << std::endl;
        return 1;
    }

    // Main loop to accept incoming connections and create new threads to handle them
    while (true) {
        SOCKET clientSocket = accept(listenSocket, NULL, NULL);
        if (clientSocket == INVALID_SOCKET) {
            std::cerr << "Accept failed with error: " << WSAGetLastError() << std::endl;
            continue;
        }

        std::thread clientThread(handleClient, clientSocket);
        clientThread.detach();  // Detach the thread to handle the connection independently
    }

    // Cleanup
    closesocket(listenSocket);
    WSACleanup();
    return 0;
}

